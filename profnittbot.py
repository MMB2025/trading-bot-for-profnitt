# -*- coding: utf-8 -*-
"""profnittbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19_vwpFNKwJwvw9eHLkDvD6rZ_OFWTJFo
"""

!pip install backtrader yfinance pandas matplotlib

import backtrader as bt
import yfinance as yf
import matplotlib as ml


def fetch_data(ticker, start_date, end_date):
    data = yf.download(ticker, start=start_date, end=end_date)
    return data

class SectorRotationStrategy(bt.Strategy):
    params = (
        ('lookback_period', 20),
    )

    def __init__(self):
        self.sector_etfs = {
            'XLE': self.datas[0],  # Energy
            'XLV': self.datas[1],  # Health Care
            'XLF': self.datas[2],  # Financials
        }
        self.lookback_period = self.params.lookback_period

    def next(self):
        best_sector = None
        best_performance = -float('inf')

        for sector, data in self.sector_etfs.items():
            performance = (data.close[0] - data.close[-self.lookback_period]) / data.close[-self.lookback_period]
            if performance > best_performance:
                best_performance = performance
                best_sector = sector

        for sector, data in self.sector_etfs.items():
            if sector == best_sector:
                self.order_target_percent(data, target=1.0)
            else:
                self.order_target_percent(data, target=0.0)

import matplotlib.pyplot as plt

def run_backtest(start_date, end_date):
    cerebro = bt.Cerebro()

    sector_etfs = ['XLE', 'XLV', 'XLF']
    for etf in sector_etfs:
        data = bt.feeds.PandasData(dataname=fetch_data(etf, start_date, end_date))
        cerebro.adddata(data, name=etf)

    cerebro.addstrategy(SectorRotationStrategy)
    cerebro.addanalyzer(bt.analyzers.SharpeRatio, _name='sharpe')
    cerebro.addanalyzer(bt.analyzers.Returns, _name='returns')
    cerebro.addanalyzer(bt.analyzers.DrawDown, _name='drawdown')

    cerebro.addanalyzer(bt.analyzers.TimeReturn, _name='timereturn')

    print('Starting Portfolio Value: %.2f' % cerebro.broker.getvalue())
    result = cerebro.run()
    print('Ending Portfolio Value: %.2f' % cerebro.broker.getvalue())

    return cerebro, result

def plot_results(cerebro, result):
    strat = result[0]

    portfolio_values = strat.analyzers.timereturn.get_analysis()
    dates = list(portfolio_values.keys())
    values = list(portfolio_values.values())

    plt.figure(figsize=(12, 6))
    plt.plot(dates, values, label='Portfolio Value')
    plt.title('Sector Rotation Strategy Performance')
    plt.xlabel('Date')
    plt.ylabel('Portfolio Value')
    plt.legend()
    plt.grid()
    plt.show()

if __name__ == "__main__":
    start_date = '2020-01-01'
    end_date = '2023-01-01'
    cerebro, result = run_backtest(start_date, end_date)

    strat = result[0]
    print('Sharpe Ratio:', strat.analyzers.sharpe.get_analysis())
    print('Returns:', strat.analyzers.returns.get_analysis())
    print('Drawdown:', strat.analyzers.drawdown.get_analysis())

    plot_results(cerebro, result)